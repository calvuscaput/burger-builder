{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.sass","containers/Auth/Auth.module.sass","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_sass__WEBPACK_IMPORTED_MODULE_1__","_Input_module_sass__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","validationError","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","valueType","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","htmlFor","label","module","exports","Input","Auth","state","controls","email","type","placeholder","validation","required","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_home_fulgrim_code_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirctPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","action","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.3bbd1f8f.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.sass';\n\nconst input = (props) => {\n  let inputElement = null;\n  let validationError = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n    validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}!</p>;\n  } \n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input \n        className={inputClasses.join(' ')}\n        {...props.elementConfig} \n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea\n        className={inputClasses.join(' ')} \n        {...props.elementConfig} \n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n      case ('select'):\n      inputElement = (\n      <select\n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed}> \n        {props.elementConfig.options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        ))}\n        </select>);\n      break;\n    default:\n      inputElement = <input \n        className={inputClasses.join(' ')} \n        {...props.elementConfig} \n        value={props.value}\n        onChange={props.changed}/>;\n  }\n\n  return (\n    <div className={classes.inputElement}>\n      <label className={classes.Label} htmlFor=\"\">{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  )\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1d5Yo\",\"Label\":\"Input_Label__1CxFT\",\"InputElement\":\"Input_InputElement__22RFt\",\"Invalid\":\"Input_Invalid__1MMvk\",\"ValidationError\":\"Input_ValidationError__2oEXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3o6WC\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.sass'\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'E-mail Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    isSignUp: true\n  }\n\n  componentDidMount () {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !=='/') {\n      this.props.onSetAuthRedirctPath()\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({controls: updatedControls});\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSignUp: !prevState.isSignUp\n      }\n    })\n  }\n  \n  render() {\n    const formElementsArray = [];\n      for (let key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        })\n      }\n    let form = formElementsArray.map(formElement => (\n      <Input \n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        valueType={formElement.id}\n        changed={(event, ) => this.inputChangedHandler(event, formElement.id)}/>\n        \n    ))\n    \n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      );\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler} action=\"\">\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button \n          clicked={this.switchAuthModeHandler}\n          btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirctPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"],"sourceRoot":""}